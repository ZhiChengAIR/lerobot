# @package _global_

# Defaults for training for the PushT dataset as per https://github.com/real-stanford/diffusion_policy.
# Note: We do not track EMA model weights as we discovered it does not improve the results. See
#       https://github.com/huggingface/lerobot/pull/134 for more details.

seed: 100000
#dataset_repo_id: zcai/pusht

# override_dataset_stats:
#   # TODO(rcadene, alexander-soare): should we remove image stats as well? do we use a pretrained vision model?
#   observation.image:
#     mean: [[[0.5]], [[0.5]], [[0.5]]]  # (c,1,1)
#     std: [[[0.5]], [[0.5]], [[0.5]]]  # (c,1,1)
#   # TODO(rcadene, alexander-soare): we override state and action stats to use the same as the pretrained model
#   # from the original codebase, but we should remove these and train our own pretrained model
#   observation.state:
#     min: [13.456424, 32.938293]
#     max: [496.14618, 510.9579]
#   action:
#     min: [12.0, 25.0]
#     max: [511.0, 511.0]

training:
  offline_steps: 3000000
  online_steps: 0
  eval_freq: -1
  save_freq: 20000
  log_freq: 250
  save_checkpoint: true

  batch_size: 16
  grad_clip_norm: 10
  lr: 1.0e-4
  lr_scheduler: cosine
  lr_warmup_steps: 500
  adam_betas: [0.95, 0.999]
  adam_eps: 1.0e-8
  adam_weight_decay: 1.0e-6
  online_steps_between_rollouts: 1

  delta_timestamps:
    observation.images.cam_right_wrist: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    # observation.images.cam_left_wrist: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    # observation.images.cam_high: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    #observation.images.cam_low: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]" #commented out, modified by yz 2024.12.17
    # observation.state: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    # action: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1 - ${policy.n_obs_steps} + ${policy.horizon})]"
    observation.endpose: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    action: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1 - ${policy.n_obs_steps} + ${policy.horizon})]"

  # The original implementation doesn't sample frames for the last 7 steps,
  # which avoids excessive padding and leads to improved training results.
  drop_n_last_frames: 7 # ${policy.horizon} - ${policy.n_action_steps} - ${policy.n_obs_steps} + 1

eval:
  n_episodes: 50
  batch_size: 50

policy:
  name: dp_tr3

  # Input / output structure.
  n_obs_steps: 2
  horizon: 16 #32 modified by yz, 更长的预测期。 人类专家的抖动和嘈杂的传感器使得从人类演示中学习变得非常困难，通过扩大预测范围
  n_action_steps: 8 # 16modified by yz 2024.12.17

  input_shapes:
    # TODO(rcadene, alexander-soare): add variables for height and width from the dataset/env?
    observation.images.cam_right_wrist: [3, 480, 640]
    # observation.images.cam_left_wrist: [3,240, 320]
    # observation.images.cam_high: [3, 240, 320]
    #observation.images.cam_low: [3, 240, 320] #commented out, modified by yz 2024.12.17
    # observation.state: ["${env.state_dim}"]
    observation.endpose: ["${env.state_dim}"]
  output_shapes:
    action: ["${env.action_dim}"]

  # Normalization / Unnormalization
  input_normalization_modes:
    observation.images.cam_right_wrist: mean_std
    # observation.images.cam_left_wrist: mean_std
    # observation.images.cam_high: mean_std
    #observation.images.cam_low: mean_std #commented out, modified by yz 2024.12.17
    # observation.state: min_max
    observation.endpose: min_max
  output_normalization_modes:
    action: min_max

  # Architecture / modeling.
  # Vision backbone.
  vision_backbone: resnet18
  #vision_backbone: fpn_resnet34
  crop_shape: [432, 576]
  crop_is_random: True
  pretrained_backbone_weights: null
  use_group_norm: True
  spatial_softmax_num_keypoints: 32
  # Unet.
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  diffusion_step_embed_dim: 128
  use_film_scale_modulation: True
  # Noise scheduler.
  noise_scheduler_type: DDIM #DDPM , changed by jh @2025.1.9
  num_train_timesteps: 100
  beta_schedule: squaredcos_cap_v2
  beta_start: 0.0001
  beta_end: 0.02
  prediction_type: epsilon # epsilon / sample
  clip_sample: True
  clip_sample_range: 1.0

  # Transformer-specific parameters
  model_type: "unet"  # "unet" or "transformer"
  transformer_n_layer: 8
  transformer_n_cond_layers: 4
  transformer_n_head: 4
  transformer_n_emb: 256
  transformer_p_drop_emb: 0.1
  transformer_p_drop_attn: 0.1
  transformer_causal_attn: True
  transformer_time_as_cond: True
  transformer_obs_as_cond: True

  # Inference
  num_inference_steps: 10

  # Loss computation
  do_mask_loss_for_padding: false

  # seperate camera encoder or not
  use_separate_rgb_encoder_per_camera: false